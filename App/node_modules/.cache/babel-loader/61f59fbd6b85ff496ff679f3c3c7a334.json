{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rahulginodia/Desktop/App/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rahulginodia/Desktop/App/App/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main.js';\nimport ParticleSettings from './ParticleSettings';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum brownser detected! You can check out your Metamask');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // console.log(account[0])\n                // load Tether contract \n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tether._address);\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Tether contract not deployed becuase no network detected');\n\n              case 20:\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance\n                }); // console.log('rwdBalance: ', rwdBalance)\n\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('RWD contract not deployed becuase no network detected');\n\n              case 31:\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 42;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance\n                });\n                console.log(decentralBankData.bank);\n                _context3.next = 43;\n                break;\n\n              case 42:\n                window.alert('DecentralBank contract not deployed becuase no network detected');\n\n              case 43:\n                this.setState.loading = false;\n\n              case 44:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(amount) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState.loading = true;\n                _context4.next = 3;\n                return _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n                  from: _this.state.account\n                });\n\n              case 3:\n                _context4.next = 5;\n                return _this.state.decentralBank.methods.depositTokens(amount).send({\n                  from: _this.state.account\n                });\n\n              case 5:\n                _this.setState.loading = false;\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.unstakeTokens = function () {\n      _this.setState.loading = true;\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState.loading = false;\n      });\n    };\n\n    _this.issueTokens = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var account;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState.loading = true;\n              _context5.next = 3;\n              return window.web3.eth.getAccounts();\n\n            case 3:\n              account = _context5.sent;\n              _context5.next = 6;\n              return _this.state.decentralBank.methods.issueTokens().send();\n\n            case 6:\n              // let stakingBa = await this.state.decentralBank.methods.stakingBalance(this.state.account).call()\n              // await this.state.rwd.methods.transfer(this.state.account,stakingBa)\n              _this.setState.loading = false;\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 41\n          }\n        }, \"LOADING PLEASE....\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          issueTokens: this.issueTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/rahulginodia/Desktop/App/App/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSettings","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","_address","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","bank","loading","props","stakeTokens","amount","approve","send","from","depositTokens","unstakeTokens","on","hash","issueTokens","content","margin","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\nimport Main from './Main.js';\nimport ParticleSettings from './ParticleSettings';\n\n\nclass App extends Component {\n\n    async UNSAFE_componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    async loadWeb3() {\n        if(window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        }\n        else if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }\n        else{\n            window.alert('No ethereum brownser detected! You can check out your Metamask')\n        }\n    }\n\n    async loadBlockchainData(){\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        this.setState({account: account[0]})\n        const networkId = await web3.eth.net.getId()\n        // console.log(account[0])\n\n        // load Tether contract \n        const tetherData = Tether.networks[networkId]\n        if(tetherData){\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n            this.setState({tether: tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString()})\n            console.log(tether._address)\n        }\n        else{\n            window.alert('Tether contract not deployed becuase no network detected')\n        }\n\n        const rwdData = RWD.networks[networkId]\n        if(rwdData){\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n            this.setState({rwd: rwd})\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance})\n            // console.log('rwdBalance: ', rwdBalance)\n        }\n        else{\n            window.alert('RWD contract not deployed becuase no network detected')\n            \n        }\n\n        const decentralBankData = DecentralBank.networks[networkId]\n        if(decentralBankData){\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n            this.setState({decentralBank: decentralBank})\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: stakingBalance})\n            console.log(decentralBankData.bank)\n        }\n        else{\n            window.alert('DecentralBank contract not deployed becuase no network detected')\n            \n        }\n        \n        this.setState.loading = false;\n\n\n    }\n\n    stakeTokens = async (amount) => {\n        this.setState.loading = true;\n        await this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account})\n        await this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account})\n        this.setState.loading = false;\n        \n    }\n\n    unstakeTokens = () => {\n        this.setState.loading = true;\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\n            this.setState.loading = false;\n        })\n    }\n\n    issueTokens = async () => {\n        this.setState.loading = true;\n        const account = await window.web3.eth.getAccounts()\n        await this.state.decentralBank.methods.issueTokens().send()\n        // let stakingBa = await this.state.decentralBank.methods.stakingBalance(this.state.account).call()\n        // await this.state.rwd.methods.transfer(this.state.account,stakingBa)\n        this.setState.loading = false;\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true \n        }\n    }\n\n    render() {\n        let content\n        {this.state.loading ? content = <p id='loader' className='text-center' style={{margin:'30px'}}>LOADING PLEASE....</p> : content = \n        <Main tetherBalance={this.state.tetherBalance}\n        rwdBalance={this.state.rwdBalance}\n        stakingBalance={this.state.stakingBalance}\n        stakeTokens = {this.stakeTokens}\n        unstakeTokens = {this.unstakeTokens}\n        issueTokens = {this.issueTokens}/>}\n        return (\n            <div className='App' style={{position: 'relative'}}>\n                <div style={{position: 'absolute'}}>\n                    <ParticleSettings />\n                </div>\n\n                <Navbar account={this.state.account}/>\n                <div className = 'container-fluid mt-5'>\n                    <div className='row content'>\n                        <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight:'100vm'}}>\n                            <div>\n                                {content}\n                            </div>\n                        </main>\n                    </div>\n                \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}